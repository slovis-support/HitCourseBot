import os
import asyncio
import threading
import time
import requests
from flask import Flask, request
from flask_cors import CORS
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI
from database import Base, engine, SessionLocal, User, Message  # üëà –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
from datetime import datetime

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai_api_key = os.getenv("OPENAI_API_KEY")
assistant_id = os.getenv("OPENAI_ASSISTANT_ID")
telegram_token = os.getenv("TELEGRAM_TOKEN")
webhook_url = os.getenv("WEBHOOK_URL")
webhook_path = "/webhook"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
flask_app = Flask(__name__)
CORS(flask_app, resources={r"/*": {"origins": "https://hitcourse.ru"}})
client = OpenAI(api_key=openai_api_key)
telegram_app = ApplicationBuilder().token(telegram_token).build()
threads = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    name = update.effective_user.first_name
    db = SessionLocal()

    user = db.query(User).filter_by(user_id=user_id).first()
    if not user:
        user = User(user_id=user_id, name=name, greeted="yes")
        db.add(user)
    else:
        user.name = name
        user.greeted = "yes"
    db.commit()
    db.close()

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø ‚Äî –°–ª–æ–≤–∏—Å, –ø–æ–º–æ—â–Ω–∏–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –•–∏—Ç–∫—É—Ä—Å.\n"
        "–ó–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –º–∏—Ä–µ –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è.\n"
        "–°–ø—Ä–æ—Å–∏ ‚Äî –∏ –ø–æ–ª—É—á–∏ —á–µ—Å—Ç–Ω—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç üß†"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_input = update.message.text
    lowered = user_input.lower()
    db = SessionLocal()

    user = db.query(User).filter_by(user_id=user_id).first()
    name = user.name if user else None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
    if "–º–µ–Ω—è –∑–æ–≤—É—Ç" in lowered:
        name = user_input.split("–º–µ–Ω—è –∑–æ–≤—É—Ç", 1)[-1].strip().strip(".! ")
        if user:
            user.name = name
        else:
            user = User(user_id=user_id, name=name)
            db.add(user)
        db.commit()
        db.close()
        await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –ó–∞–ø–æ–º–Ω–∏–ª üòä")
        return

    if "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç" in lowered:
        if name:
            await update.message.reply_text(f"–¢–µ–±—è –∑–æ–≤—É—Ç {name}! üòä")
        else:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏. –ù–∞–ø–∏—à–∏: ¬´–º–µ–Ω—è –∑–æ–≤—É—Ç ...¬ª")
        db.close()
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –≤ OpenAI
    if user_id not in threads:
        thread = client.beta.threads.create()
        threads[user_id] = thread.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    history = db.query(Message).filter_by(user_id=user_id).order_by(Message.timestamp.desc()).limit(10).all()
    for m in reversed(history):
        client.beta.threads.messages.create(
            thread_id=threads[user_id],
            role=m.role,
            content=m.content
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    client.beta.threads.messages.create(
        thread_id=threads[user_id],
        role="user",
        content=user_input
    )
    db.add(Message(user_id=user_id, role="user", content=user_input))
    db.commit()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ OpenAI
    client.beta.threads.runs.create_and_poll(
        thread_id=threads[user_id],
        assistant_id=assistant_id
    )
    messages = client.beta.threads.messages.list(thread_id=threads[user_id])
    answer = messages.data[0].content[0].text.value
    
    db.add(Message(user_id=user_id, role="assistant", content=answer))
    db.commit()
    db.close()

    if name and not ("–º–µ–Ω—è –∑–æ–≤—É—Ç" in lowered or "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç" in lowered):
        answer = f"{name}, {answer}"

    await update.message.reply_text(answer)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞
@flask_app.route(webhook_path, methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)

    async def process():
        await telegram_app.initialize()
        await telegram_app.process_update(update)

    try:
        asyncio.get_event_loop().create_task(process())
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(process())

    return "OK", 200

# Keep-alive ping
def keep_alive_ping():
    while True:
        try:
            requests.get(webhook_url)
        except Exception as e:
            print("Keep-alive error:", e)
        time.sleep(60)

threading.Thread(target=keep_alive_ping, daemon=True).start()

# Flask WebApp (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å)
@flask_app.route("/message", methods=["POST"])
def web_chat():
    try:
        data = request.get_json()
        user_message = data.get("message", "")
        if not user_message.strip():
            return {"reply": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."}, 400

        thread_id = threads.get("web")
        if not thread_id:
            thread = client.beta.threads.create()
            threads["web"] = thread.id
            thread_id = thread.id

        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_message
        )
        client.beta.threads.runs.create_and_poll(
            thread_id=thread_id,
            assistant_id=assistant_id
        )
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        reply = messages.data[0].content[0].text.value
        return {"reply": reply}

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ /message:", e)
        return {"reply": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."}, 500

# –ó–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç —Å –ø–∞–º—è—Ç—å—é –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway")
    flask_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
