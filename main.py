import os
import asyncio
import threading
import time
import requests
from flask import Flask, request
from flask_cors import CORS
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI
from database import SessionLocal, User, init_db

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai_api_key = os.getenv("OPENAI_API_KEY")
assistant_id = os.getenv("OPENAI_ASSISTANT_ID")
telegram_token = os.getenv("TELEGRAM_TOKEN")
webhook_url = os.getenv("WEBHOOK_URL")
webhook_path = "/webhook"

# Flask –∏ Telegram
flask_app = Flask(__name__)
CORS(flask_app, resources={r"/*": {"origins": "https://hitcourse.ru"}})
client = OpenAI(api_key=openai_api_key)
telegram_app = ApplicationBuilder().token(telegram_token).build()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    name = update.effective_user.first_name
    db = SessionLocal()

    user = db.query(User).filter_by(telegram_id=user_id).first()
    if not user:
        user = User(telegram_id=user_id, name=name)
        db.add(user)
    else:
        user.name = name
    db.commit()
    db.close()

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø ‚Äî –°–ª–æ–≤–∏—Å, –ø–æ–º–æ—â–Ω–∏–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –•–∏—Ç–∫—É—Ä—Å.\n"
        "–°–ø—Ä–æ—Å–∏ ‚Äî –∏ –ø–æ–ª—É—á–∏ —á–µ—Å—Ç–Ω—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç üß†"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_input = update.message.text
    lowered = user_input.lower().strip()

    db = SessionLocal()
    user = db.query(User).filter_by(telegram_id=user_id).first()

    if not user:
        user = User(telegram_id=user_id)
        db.add(user)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞: "–º–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π"
    if "–º–µ–Ω—è –∑–æ–≤—É—Ç" in lowered:
        name = user_input.split("–º–µ–Ω—è –∑–æ–≤—É—Ç", 1)[-1].strip().strip(".!")
        if name:
            user.name = name
            db.commit()
            await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –ó–∞–ø–æ–º–Ω–∏–ª üòä")
            db.close()
            return

    # –ï—Å–ª–∏ –Ω–µ—Ç thread_id ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    if not user.thread_id:
        thread = client.beta.threads.create()
        user.thread_id = thread.id
        db.commit()

    try:
        client.beta.threads.messages.create(
            thread_id=user.thread_id,
            role="user",
            content=user_input
        )

        client.beta.threads.runs.create_and_poll(
            thread_id=user.thread_id,
            assistant_id=assistant_id
        )

        messages = client.beta.threads.messages.list(thread_id=user.thread_id)
        answer = messages.data[0].content[0].text.value

        # üëá –î–æ–±–∞–≤–∏–º –∏–º—è –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç"
        if user.name and not ("–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç" in lowered or "–º–µ–Ω—è –∑–æ–≤—É—Ç" in lowered):
            answer = f"{user.name}, {answer}"

        await update.message.reply_text(answer)

    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    finally:
        db.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# Webhook –¥–ª—è Telegram
@flask_app.route(webhook_path, methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)

    async def process():
        await telegram_app.initialize()
        await telegram_app.process_update(update)

    try:
        asyncio.get_event_loop().create_task(process())
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(process())

    return "OK", 200

# –ü–∏–Ω–≥ –¥–ª—è Railway
def keep_alive_ping():
    while True:
        try:
            requests.get(webhook_url)
        except Exception as e:
            print("Keep-alive error:", e)
        time.sleep(60)

threading.Thread(target=keep_alive_ping, daemon=True).start()

# –ó–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç HitCourse –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway")
    flask_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
